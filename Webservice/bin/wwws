#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("prep-eat:server");
var http = require("http");
var fs = require("fs");
var https = require("https");
require("dotenv").config();

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}

/**
 * Add HTTPS Section
 */
var https_port = normalizePort(process.env.PORT_HTTPS || "8443");
app.set("port", https_port);

var options = {
  key: fs.readFileSync("key.pem"),
  cert: fs.readFileSync("cert.pem"),
  passphrase: process.env.SSL_CERTIFICATE_PASSPHRASE,
};

/**
 * Create HTTPS server.
 */

server = https.createServer(options, app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(https_port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Init HTTP Port
 */
var http_port = normalizePort(process.env.PORT || "8080");

/**
 * Create HTTP server with a redirect from http port to https
 */

http
  .createServer(function (req, res) {
    res.writeHead(308, {
      Location:
        "https://" +
        req.headers["host"].replace(http_port, https_port) +
        req.url,
    });
    res.end();
  })
  .listen(http_port);
